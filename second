view: users {
  sql_table_name: `dna-legal-central-data.case_mart_dev.users` ;;
  drill_fields: [id]

  dimension: id {
    primary_key: yes
    type: string
    description: "A unique identifier for a user"
    sql: ${TABLE}.id ;;
  }
  dimension_group: created {
    type: time
    description: "The time when the record was created"
    timeframes: [raw, time, date, week, month, quarter, year]
    sql: ${TABLE}.created_at ;;
  }
  dimension: email {
    type: string
    sql: ${TABLE}.email ;;
  }
  dimension: first_name {
    type: string
    description: "The first name of the user"
    sql: ${TABLE}.first_name ;;
  }
  dimension: last_name {
    type: string
    description: "The last name of the user"
    sql: ${TABLE}.last_name ;;
  }
  dimension: full_name{
    label: "Account Manager Full Name"
    type: string
    sql: ${TABLE}.full_name ;;
  }
  dimension: mobile_number {
    type: string
    description: "The mobile number associated with this user"
    sql: ${TABLE}.mobile_number ;;
  }
  dimension: source {
    type: string
    description: "The source of the data (mim or sugar_crm)"
    sql: ${TABLE}.source ;;
  }
  dimension_group: updated {
    type: time
    description: "The time when the record was last updated"
    timeframes: [raw, time, date, week, month, quarter, year]
    sql: ${TABLE}.updated_at ;;
  }
  measure: count {
    type: count
    drill_fields: [id, last_name, first_name]
  }
}
#######################################################################



# Next Dash  - Operations

explore: operations_performance {
  label: "Operations Performance"
  description: "Explore focused on tracking case lifecycle and operational KPIs (e.g. booking, lab, reporting stages)."
  view_name: cases_operations

  join: appointments {
    type: left_outer
    sql_on: ${cases_operations.id} = ${appointments.case_id} ;;
    relationship: one_to_many
  }

  #  Pre-join for later steps
  join: tests {
    type: left_outer
    sql_on: ${cases_operations.id} = ${tests.parent_id} ;;
    relationship: one_to_many
  }

  join: samples {
    type: left_outer
    sql_on: ${cases_operations.id} = ${samples.case_id} ;;
    relationship: one_to_many
  }

  join: drug_alcohol_results {
    type: left_outer
    sql_on: ${tests.id} = ${drug_alcohol_results.test_id} ;;
    relationship: one_to_many
  }

  join: mim_samples {
    type: left_outer
    sql_on: ${cases_operations.id} = ${mim_samples.case_id} ;;
    relationship: one_to_many
  }

  }
